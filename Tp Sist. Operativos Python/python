import threading
import time
import queue

# Clase que representa un trabajador en un thread
class Worker(threading.Thread):
    def __init__(self, name, count_up_to, stop_event, work_queue):
        super().__init__()
        self.name = name
        self.count_up_to = count_up_to
        self.stop_event = stop_event
        self.work_queue = work_queue

    def run(self):
        print(f'{self.name} started.')
        for i in range(1, self.count_up_to + 1):
            if self.stop_event.is_set():
                print(f'{self.name} received stop signal.')
                break
            print(f'{self.name} is counting: {i}')
            time.sleep(1)  # Simula trabajo haciendo una pausa de 1 segundo
            # Check if there are any interruptions from the queue
            try:
                interruption = self.work_queue.get_nowait()
                if interruption == "stop":
                    print(f'{self.name} received stop signal from queue.')
                    break
            except queue.Empty:
                pass
        print(f'{self.name} finished.')

# Crear un evento de parada y una cola de trabajo
stop_event = threading.Event()
work_queue = queue.Queue()

# Crear y lanzar threads trabajadores
workers = []
for i in range(3):
    worker = Worker(f'Worker-{i+1}', 10, stop_event, work_queue)
    workers.append(worker)
    worker.start()

# Esperar un momento antes de interrumpir
time.sleep(5)

# Interrumpir todos los threads estableciendo el evento de parada
stop_event.set()

# O interrumpir usando la cola (puede usarse en lugar de o junto con stop_event)
# for _ in workers:
#     work_queue.put("stop")

# Esperar a que todos los threads finalicen
for worker in workers:
    worker.join()

print("All workers have been stopped.")
